// import utility from './utilities';

// let qlik;
// let { qlik } = utility.qlobals;
export const globals = {
  qlik: null,
  resize: null,
};

let capabilityApisPromise;

const loadCapabilityApis = async (config) => {
  try {
    if (capabilityApisPromise) {
      await capabilityApisPromise;
      return;
    }
    const capabilityApisJS = document.createElement('script');
    const prefix = (config.prefix !== '') ? `/${config.prefix}` : '';
    capabilityApisJS.src = `${(config.secure ? 'https://' : 'http://') + config.host + (config.port ? `:${config.port}` : '') + prefix}/resources/assets/external/requirejs/require.js`;
    document.head.appendChild(capabilityApisJS);
    capabilityApisJS.loaded = new Promise((resolve) => {
      capabilityApisJS.onload = () => { resolve(); };
    });
    const capabilityApisCSS = document.createElement('link');
    capabilityApisCSS.href = `${(config.secure ? 'https://' : 'http://') + config.host + (config.port ? `:${config.port}` : '') + prefix}/resources/autogenerated/qlik-styles.css`;
    capabilityApisCSS.type = 'text/css';
    capabilityApisCSS.rel = 'stylesheet';
    document.head.appendChild(capabilityApisCSS);
    capabilityApisCSS.loaded = new Promise((resolve) => {
      capabilityApisCSS.onload = () => { resolve(); };
    });

    capabilityApisPromise = Promise.all([capabilityApisJS.loaded, capabilityApisCSS.loaded]);

    await capabilityApisPromise;
  } catch (error) {
    throw new Error(error);
  }
};

const qApp = async (config) => {
  try {
    await loadCapabilityApis(config);
    const prefix = (config.prefix !== '') ? `/${config.prefix}/` : '/';
    window.require.config({
      baseUrl: `${(config.secure ? 'https://' : 'http://') + config.host + (config.port ? `:${config.port}` : '') + prefix}resources`,
      paths: {
        qlik: `${(config.secure ? 'https://' : 'http://') + config.host + (config.port ? `:${config.port}` : '') + prefix}resources/js/qlik`,
      },
      webIntegrationId: config.webIntegrationId,
      config: {
        text: {
          useXhr() {
            return true;
          },
        },
      },
    });
    return new Promise((resolve) => {
      if (globals.qlik) {
        const app = globals.qlik.openApp(config.appId, { ...config, isSecure: config.secure, prefix });
        // apply theme set in QSE
        app.theme.get().then((theme) => {
          theme.apply();
        });
        resolve(app);
      } else {
        window.require(['js/qlik'], (q) => {
          globals.qlik = q;
          globals.resize = () => {
            q.resize();
          };
          const app = q.openApp(config.appId, { ...config, isSecure: config.secure, prefix });
          resolve(app);
        });
      }
    });
  } catch (error) {
    throw new Error(error);
  }
};

export default qApp;
